group 'com.github.khazrak'
//name 'docker-client'

version '1.1.3'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "jdocker-client"

repositories {
    mavenCentral()
}

dependencies {

    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.2'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.2'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    //PEM support
    compile 'org.bouncycastle:bcpkix-jdk15on:1.55'

    compile 'com.github.jnr:jnr-unixsocket:0.12'

   


    compileOnly 'org.projectlombok:lombok:1.16.10'
    testCompile 'junit:junit:4.12'
    testCompile "com.github.tomakehurst:wiremock:2.1.12"
    testCompile 'org.assertj:assertj-core:3.5.2'
    testCompile 'org.slf4j:slf4j-simple:1.7.21'

}

// Integration Test Support
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

}
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}



// Maven
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                def ossrU = project.findProperty("ossrhUsername") ?: ""
                def ossrP = project.findProperty("ossrhPassword") ?: ""
              
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                def ossrU = project.findProperty("ossrhUsername") ?: ""
                def ossrP = project.findProperty("ossrhPassword") ?: ""

                authentication(userName: ossrU, password: ossrP)
            }

            pom.project {
                name 'Docker Java Client'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Docker Java Client for Remote API v1.24'
                url 'http://www.example.com/example-application'

                scm {
                    connection 'scm:git@github.com:Khazrak/JDocker.git'
                    developerConnection 'scm:git@github.com:Khazrak/JDocker.git'
                    url 'https://github.com/Khazrak/JDocker.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'Khazrak'
                        name 'Karl Andersson'
                        email 'karl.andersson1987@gmail.com'
                    }
                }
            }.writeTo("${project.buildDir}/poms/pom.xml")
        }
    }
}

